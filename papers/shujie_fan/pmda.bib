%% This BibTeX bibliography file was created using BibDesk.
%% http://bibdesk.sourceforge.net/

%% Created for Oliver Beckstein at 2019-05-20 13:51:45 -0700 


%% Saved with string encoding Unicode (UTF-8) 



@article{Wickham:2011aa,
	Abstract = {Many data analysis problems involve the application of a split-apply-combine strategy, where you break up a big problem into manageable pieces, operate on each piece independently and then put all the pieces back together. This insight gives rise to a new R package that allows you to smoothly apply this strategy, without having to worry about the type of structure in which your data is stored.},
	Author = {Hadley Wickham},
	Date-Added = {2019-05-20 13:28:45 -0700},
	Date-Modified = {2019-05-20 13:28:45 -0700},
	Doi = {10.18637/jss.v040.i01},
	Journal = {Journal of Statistical Software},
	Keywords = {R, parallel analysis framework},
	Number = {1},
	Title = {The Split-Apply-Combine Strategy for Data Analysis},
	Volume = {40},
	Year = {2011},
	Bdsk-File-1 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhZYWxpYXNEYXRhXxBpLi4vLi4vLi4vLi4vLi4vLi4vRG9jdW1lbnRzL1B1YmxpY2F0aW9ucy9wZGYvQmliRGVzay9Kb3VybmFsIG9mIFN0YXRpc3RpY2FsIFNvZnR3YXJlXzQwX1dpY2toYW1fMjAxMWEucGRmTxECIAAAAAACIAACAAAERGF0YQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA0yQMDEgrAAAAFjJAH0pvdXJuYWwgb2YgU3RhdGlzdGljIzg2Rjg3QS5wZGYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACG+HrZCDTUAAAAAAAAAAAABgAFAAAJAAAAAAAAAAAAAAAAAAAAAAdCaWJEZXNrAAAQAAgAANMkbnwAAAARAAgAANkIl0QAAAABABQAFjJAABYyPgAWL1gAFT4MAAAZ4QACAFNEYXRhOm9saXZlcjoARG9jdW1lbnRzOgBQdWJsaWNhdGlvbnM6AHBkZjoAQmliRGVzazoASm91cm5hbCBvZiBTdGF0aXN0aWMjODZGODdBLnBkZgAADgBqADQASgBvAHUAcgBuAGEAbAAgAG8AZgAgAFMAdABhAHQAaQBzAHQAaQBjAGEAbAAgAFMAbwBmAHQAdwBhAHIAZQBfADQAMABfAFcAaQBjAGsAaABhAG0AXwAyADAAMQAxAGEALgBwAGQAZgAPAAoABABEAGEAdABhABIAXy9vbGl2ZXIvRG9jdW1lbnRzL1B1YmxpY2F0aW9ucy9wZGYvQmliRGVzay9Kb3VybmFsIG9mIFN0YXRpc3RpY2FsIFNvZnR3YXJlXzQwX1dpY2toYW1fMjAxMWEucGRmAAATAA0vVm9sdW1lcy9EYXRhAP//AAAACAANABoAJACQAAAAAAAAAgEAAAAAAAAABQAAAAAAAAAAAAAAAAAAArQ=},
	Bdsk-Url-1 = {https://www.jstatsoft.org/article/view/v040i01}}

@article{Michaud-Agrawal:2011fu,
	Abstract = {MDAnalysis is an object-oriented library for structural and temporal analysis of molecular dynamics (MD) simulation trajectories and individual protein structures. It is written in the Python language with some performance-critical code in C. It uses the powerful NumPy package to expose trajectory data as fast and efficient NumPy arrays. It has been tested on systems of millions of particles. Many common file formats of simulation packages including CHARMM, Gromacs, and NAMD and the Protein Data Bank format can be read and written.  Atoms can be selected with a syntax similar to CHARMM's powerful selection commands. MDAnalysis enables both novice and experienced programmers to rapidly write their own analytical tools and access data stored in trajectories in an easily accessible manner that facilitates interactive explorative analysis. MDAnalysis has been tested on and works for most Unix-based platforms such as Linux and Mac OS X. It is freely available under the GNU Public License from http://mdanalysis.googlecode.com.},
	Author = {Michaud-Agrawal, Naveen and Denning, Elizabeth Jane and Woolf, Thomas B. and Beckstein, Oliver},
	Date-Added = {2019-05-20 13:28:45 -0700},
	Date-Modified = {2019-05-20 13:28:45 -0700},
	Doi = {10.1002/jcc.21787},
	Journal = {J Comp Chem},
	Keywords = {MDAnalysis, molecular dynamics (MD) simulation, Python},
	Pages = {2319--2327},
	Title = {{MDAnalysis}: A Toolkit for the Analysis of Molecular Dynamics Simulations},
	Volume = {32},
	Year = {2011},
	Bdsk-File-1 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhZYWxpYXNEYXRhXxBdLi4vLi4vLi4vLi4vLi4vLi4vRG9jdW1lbnRzL1B1YmxpY2F0aW9ucy9wZGYvQmliRGVzay9KIENvbXAgQ2hlbV8zMl9NaWNoYXVkLUFncmF3YWxfMjAxMWEucGRmTxEB/AAAAAAB/AACAAAERGF0YQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA0yQMDEgrAAAAFjJAH0ogQ29tcCBDaGVtXzMyX01pY2hhIzE2NTI4OS5wZGYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWUonL4+iEAAAAAAAAAAAABgAFAAAJAAAAAAAAAAAAAAAAAAAAAAdCaWJEZXNrAAAQAAgAANMkbnwAAAARAAgAAMvkSvQAAAABABQAFjJAABYyPgAWL1gAFT4MAAAZ4QACAFNEYXRhOm9saXZlcjoARG9jdW1lbnRzOgBQdWJsaWNhdGlvbnM6AHBkZjoAQmliRGVzazoASiBDb21wIENoZW1fMzJfTWljaGEjMTY1Mjg5LnBkZgAADgBSACgASgAgAEMAbwBtAHAAIABDAGgAZQBtAF8AMwAyAF8ATQBpAGMAaABhAHUAZAAtAEEAZwByAGEAdwBhAGwAXwAyADAAMQAxAGEALgBwAGQAZgAPAAoABABEAGEAdABhABIAUy9vbGl2ZXIvRG9jdW1lbnRzL1B1YmxpY2F0aW9ucy9wZGYvQmliRGVzay9KIENvbXAgQ2hlbV8zMl9NaWNoYXVkLUFncmF3YWxfMjAxMWEucGRmAAATAA0vVm9sdW1lcy9EYXRhAP//AAAACAANABoAJACEAAAAAAAAAgEAAAAAAAAABQAAAAAAAAAAAAAAAAAAAoQ=},
	Bdsk-File-2 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhZYWxpYXNEYXRhXxBfLi4vLi4vLi4vLi4vLi4vLi4vRG9jdW1lbnRzL1B1YmxpY2F0aW9ucy9wZGYvQmliRGVzay9KIENvbXAgQ2hlbV9lcHViX01pY2hhdWQtQWdyYXdhbF8yMDExYi5wZGZPEQICAAAAAAICAAIAAAREYXRhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADTJAwMSCsAAAAWMkAfSiBDb21wIENoZW1fZXB1Yl9NaWMjMTY1MjkwLnBkZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABZSkMnYRe8AAAAAAAAAAAAGAAUAAAkAAAAAAAAAAAAAAAAAAAAAB0JpYkRlc2sAABAACAAA0yRufAAAABEACAAAydioXwAAAAEAFAAWMkAAFjI+ABYvWAAVPgwAABnhAAIAU0RhdGE6b2xpdmVyOgBEb2N1bWVudHM6AFB1YmxpY2F0aW9uczoAcGRmOgBCaWJEZXNrOgBKIENvbXAgQ2hlbV9lcHViX01pYyMxNjUyOTAucGRmAAAOAFYAKgBKACAAQwBvAG0AcAAgAEMAaABlAG0AXwBlAHAAdQBiAF8ATQBpAGMAaABhAHUAZAAtAEEAZwByAGEAdwBhAGwAXwAyADAAMQAxAGIALgBwAGQAZgAPAAoABABEAGEAdABhABIAVS9vbGl2ZXIvRG9jdW1lbnRzL1B1YmxpY2F0aW9ucy9wZGYvQmliRGVzay9KIENvbXAgQ2hlbV9lcHViX01pY2hhdWQtQWdyYXdhbF8yMDExYi5wZGYAABMADS9Wb2x1bWVzL0RhdGEA//8AAAAIAA0AGgAkAIYAAAAAAAACAQAAAAAAAAAFAAAAAAAAAAAAAAAAAAACjA==},
	Bdsk-Url-1 = {http://code.google.com/p/mdanalysis/},
	Bdsk-Url-2 = {http://dx.doi.org/10.1002/jcc.21787}}

@article{Van-Der-Walt:2011aa,
	Abstract = {In the Python world, NumPy arrays are the standard representation for numerical data and enable efficient implementation of numerical computations in a high-level language. As this effort shows, NumPy performance can be improved through three techniques: vectorizing calculations, avoiding copying data in memory, and minimizing operation counts.},
	Author = {Van Der Walt, Stefan and Colbert, S Chris and Varoquaux, Gael},
	Date-Added = {2019-05-20 13:28:45 -0700},
	Date-Modified = {2019-05-20 13:28:45 -0700},
	Doi = {10.1109/MCSE.2011.37},
	Journal = {Computing in Science \& Engineering},
	Keywords = {numpy},
	Number = {2},
	Pages = {22--30},
	Publisher = {AIP Publishing},
	Title = {The NumPy array: a structure for efficient numerical computation},
	Volume = {13},
	Year = {2011},
	Bdsk-Url-1 = {https://doi.org/10.1109/MCSE.2011.37}}

@inproceedings{Rocklin:2015aa,
	Abstract = {Dask enables parallel and out-of-core computation. We couple blocked algorithms with dynamic and memory aware task scheduling to achieve a parallel and out-of-core NumPy clone. We show how this extends the effective scale of modern hardware to larger datasets and discuss how these ideas can be more broadly applied to other parallel collections.},
	Author = {Rocklin, Matthew},
	Booktitle = {Proceedings of the 14th Python in Science Conference},
	Date-Added = {2019-05-20 13:28:45 -0700},
	Date-Modified = {2019-05-20 13:28:45 -0700},
	Keywords = {parallelism, NumPy, scheduling, Python},
	Number = {130--136},
	Title = {Dask: Parallel Computation with Blocked algorithms and Task Scheduling},
	Url = {https://github.com/dask/dask},
	Year = {2015},
	Bdsk-File-1 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhZYWxpYXNEYXRhXxBMLi4vLi4vLi4vLi4vLi4vLi4vRG9jdW1lbnRzL1B1YmxpY2F0aW9ucy9wZGYvQmliRGVzay9TY2lQeV9Sb2NrbGluXzIwMTVhLnBkZk8RAcAAAAAAAcAAAgAABERhdGEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANMkDAxIKwAAABYyQBdTY2lQeV9Sb2NrbGluXzIwMTVhLnBkZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAeBnN1zrfLAAAAAAAAAAAAAYABQAACQAAAAAAAAAAAAAAAAAAAAAHQmliRGVzawAAEAAIAADTJG58AAAAEQAIAADXO0GcAAAAAQAUABYyQAAWMj4AFi9YABU+DAAAGeEAAgBLRGF0YTpvbGl2ZXI6AERvY3VtZW50czoAUHVibGljYXRpb25zOgBwZGY6AEJpYkRlc2s6AFNjaVB5X1JvY2tsaW5fMjAxNWEucGRmAAAOADAAFwBTAGMAaQBQAHkAXwBSAG8AYwBrAGwAaQBuAF8AMgAwADEANQBhAC4AcABkAGYADwAKAAQARABhAHQAYQASAEIvb2xpdmVyL0RvY3VtZW50cy9QdWJsaWNhdGlvbnMvcGRmL0JpYkRlc2svU2NpUHlfUm9ja2xpbl8yMDE1YS5wZGYAEwANL1ZvbHVtZXMvRGF0YQD//wAAAAgADQAaACQAcwAAAAAAAAIBAAAAAAAAAAUAAAAAAAAAAAAAAAAAAAI3},
	Bdsk-Url-1 = {https://github.com/dask/dask}}

@article{Cheatham:2015qf,
	Abstract = {The field of biomolecular simulation has matured to the level that detailed, accurate, and functionally relevant information that complements experimental data about the structure, dynamics, and interactions of biomolecules can now be routinely discovered. This has been enabled by access to large scale and heterogeneous high performance computing resources, including special purpose hardware. The improved performance of modern simulation methods coupled with hardware advances is shifting the rate-limiting steps of common biomolecular simulations of small- to moderately-sized systems from the generation of data (for example via production molecular dynamics simulations that used to take weeks or even months) to the pre- and post-processing phases of the workflow, namely simulation set-up and data processing, management, and analysis. Access to heterogeneous computational resources enables a broader exploration of biomolecular structure and dynamics by facilitating distinct aspects of typical biomolecular simulation workflows.},
	Author = {Cheatham, T. and Roe, D.},
	Date-Added = {2019-05-20 13:28:45 -0700},
	Date-Modified = {2019-05-20 13:28:45 -0700},
	Doi = {10.1109/MCSE.2015.7},
	Issn = {1521-9615},
	Journal = {Computing in Science Engineering},
	Keywords = {review; analysis; MD simulation; DNA; REMD; Analytical models;Biological system modeling;Chemistry;Computational modeling;Convergence;Educational institutions;Hardware},
	Number = {2},
	Pages = {30--39},
	Title = {The impact of heterogeneous computing on workflows for biomolecular simulation and analysis},
	Volume = {17},
	Year = {2015},
	Bdsk-File-1 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhZYWxpYXNEYXRhXxBrLi4vLi4vLi4vLi4vLi4vLi4vRG9jdW1lbnRzL1B1YmxpY2F0aW9ucy9wZGYvQmliRGVzay9Db21wdXRpbmcgaW4gU2NpZW5jZSBFbmdpbmVlcmluZ18xN19DaGVhdGhhbV8yMDE1YS5wZGZPEQImAAAAAAImAAIAAAREYXRhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADTJAwMSCsAAAAWMkAfQ29tcHV0aW5nIGluIFNjaWVuY2UjODBGNzE4LnBkZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAID3GNgjoi8AAAAAAAAAAAAGAAUAAAkAAAAAAAAAAAAAAAAAAAAAB0JpYkRlc2sAABAACAAA0yRufAAAABEACAAA2CQEnwAAAAEAFAAWMkAAFjI+ABYvWAAVPgwAABnhAAIAU0RhdGE6b2xpdmVyOgBEb2N1bWVudHM6AFB1YmxpY2F0aW9uczoAcGRmOgBCaWJEZXNrOgBDb21wdXRpbmcgaW4gU2NpZW5jZSM4MEY3MTgucGRmAAAOAG4ANgBDAG8AbQBwAHUAdABpAG4AZwAgAGkAbgAgAFMAYwBpAGUAbgBjAGUAIABFAG4AZwBpAG4AZQBlAHIAaQBuAGcAXwAxADcAXwBDAGgAZQBhAHQAaABhAG0AXwAyADAAMQA1AGEALgBwAGQAZgAPAAoABABEAGEAdABhABIAYS9vbGl2ZXIvRG9jdW1lbnRzL1B1YmxpY2F0aW9ucy9wZGYvQmliRGVzay9Db21wdXRpbmcgaW4gU2NpZW5jZSBFbmdpbmVlcmluZ18xN19DaGVhdGhhbV8yMDE1YS5wZGYAABMADS9Wb2x1bWVzL0RhdGEA//8AAAAIAA0AGgAkAJIAAAAAAAACAQAAAAAAAAAFAAAAAAAAAAAAAAAAAAACvA==},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/MCSE.2015.7}}

@inproceedings{Gowers:2016aa,
	Abstract = {MDAnalysis (http://mdanalysis.org) is a library for structural and temporal analysis of molecular dynamics (MD) simulation trajectories and individual protein structures. MD simulations of biological molecules have become an important tool to elucidate the relationship between molecular structure and physiological function. Simulations are performed with highly optimized software packages on HPC resources but most codes generate output trajectories in their own formats so that the development of new trajectory analysis algorithms is confined to specific user communities and widespread adoption and further development is delayed. MDAnalysis addresses this problem by abstracting access to the raw simulation data and presenting a uniform object-oriented Python interface to the user. It thus enables users to rapidly write code that is portable and immediately usable in virtually all biomolecular simulation communities. The user interface and modular design work equally well in complex scripted work flows, as foundations for other packages, and for interactive and rapid prototyping work in IPython / Jupyter notebooks, especially together with molecular visualization provided by nglview and time series analysis with pandas. MDAnalysis is written in Python and Cython and uses NumPy arrays for easy interoperability with the wider scientific Python ecosystem. It is widely used and forms the foundation for more specialized biomolecular simulation tools. MDAnalysis is available under the GNU General Public License v2. },
	Address = {Austin, TX},
	Author = {Gowers, Richard J. and Linke, Max and Barnoud, Jonathan and Reddy, Tyler J. E. and Melo, Manuel N. and Seyler, Sean L. and Dotson, David L and Doma{\'n}ski, Jan and Buchoux, S{\'e}bastien and Kenney, Ian M. and Beckstein, Oliver},
	Booktitle = {{P}roceedings of the 15th {P}ython in {S}cience {C}onference},
	Date-Added = {2019-05-20 13:28:45 -0700},
	Date-Modified = {2019-05-20 13:28:45 -0700},
	Doi = {10.25080/Majora-629e541a-00e},
	Editor = {Benthall, Sebastian and Rostrup, Scott},
	Keywords = {MDAnalysis, Python, SPIDAL},
	Organization = {SciPy},
	Pages = {98--105},
	Title = {{MDAnalysis}: A {Python} package for the Rapid Analysis of Molecular Dynamics Simulations},
	Url = {https://www.mdanalysis.org},
	Year = {2016},
	Bdsk-File-1 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhZYWxpYXNEYXRhXxBPLi4vLi4vLi4vLi4vLi4vLi4vRG9jdW1lbnRzL1B1YmxpY2F0aW9ucy9wZGYvQmliRGVzay9TY2lQeTIwMTZfR293ZXJzXzIwMTZhLnBkZk8RAcwAAAAAAcwAAgAABERhdGEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANMkDAxIKwAAABYyQBpTY2lQeTIwMTZfR293ZXJzXzIwMTZhLnBkZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATuSC0+9rVQAAAAAAAAAAAAYABQAACQAAAAAAAAAAAAAAAAAAAAAHQmliRGVzawAAEAAIAADTJG58AAAAEQAIAADT783FAAAAAQAUABYyQAAWMj4AFi9YABU+DAAAGeEAAgBORGF0YTpvbGl2ZXI6AERvY3VtZW50czoAUHVibGljYXRpb25zOgBwZGY6AEJpYkRlc2s6AFNjaVB5MjAxNl9Hb3dlcnNfMjAxNmEucGRmAA4ANgAaAFMAYwBpAFAAeQAyADAAMQA2AF8ARwBvAHcAZQByAHMAXwAyADAAMQA2AGEALgBwAGQAZgAPAAoABABEAGEAdABhABIARS9vbGl2ZXIvRG9jdW1lbnRzL1B1YmxpY2F0aW9ucy9wZGYvQmliRGVzay9TY2lQeTIwMTZfR293ZXJzXzIwMTZhLnBkZgAAEwANL1ZvbHVtZXMvRGF0YQD//wAAAAgADQAaACQAdgAAAAAAAAIBAAAAAAAAAAUAAAAAAAAAAAAAAAAAAAJG},
	Bdsk-Url-1 = {http://conference.scipy.org/proceedings/scipy2016/oliver_beckstein.html}}

@inproceedings{Khoshlessan:2017ab,
	Abstract = {The analysis of biomolecular computer simulations has become a challenge because the amount of output data is now routinely in the terabyte range. We evaluated if this challenge can be met by a parallel map-reduce approach with the Dask parallel computing library for task-graph based com- puting coupled with our MDAnalysis Python library for the analysis of molecular dynamics (MD) simulations. We performed a representative performance evalu- ation, taking into account the highly heterogeneous computing environment that researchers typically work in together with the diversity of existing file formats for MD trajectory data. We found that the underlying storage system (solid state drives, parallel file systems, or simple spinning platter disks) can be a deciding performance factor that leads to data ingestion becoming the primary bottleneck in the analysis work flow. However, the choice of the data file format can mitigate the effect of the storage system; in particular, the commonly used Gromacs XTC trajectory format, which is highly compressed, can exhibit strong scaling close to ideal due to trading a decrease in global storage access load against an increase in local per-core CPU-intensive decompression. Scaling was tested on a single node and multiple nodes on national and local supercomputing resources as well as typical workstations. Although very good strong scaling could be achieved for single nodes, good scaling across multiple nodes was hindered by the persistent occurrence of "stragglers", tasks that take much longer than all other tasks, and whose ultimate cause could not be completely ascertained. In summary, we show that, due to the focus on high interoperability in the scientific Python eco system, it is straightforward to implement map-reduce with Dask in MDAnalysis and provide an in-depth analysis of the considerations to obtain good parallel performance on HPC resources.},
	Address = {Austin, TX},
	Author = {Khoshlessan, Mahzad and Paraskevakos, Ioannis and Jha, Shantenu and Beckstein, Oliver},
	Booktitle = {{P}roceedings of the 16th {P}ython in {S}cience {C}onference},
	Date-Added = {2019-05-20 13:28:45 -0700},
	Date-Modified = {2019-05-20 13:28:45 -0700},
	Doi = {10.25080/shinma-7f4c6e7-00a},
	Editor = {{K}aty {H}uff and {D}avid {L}ippa and {D}illon {N}iederhut and {M} {P}acer},
	Keywords = {MDAnalysis, High Performance Computing, Dask, Map-Reduce, MPI for Python},
	Organization = {SciPy},
	Pages = {64--72},
	Title = {Parallel Analysis in {MDAnalysis} using the {Dask} Parallel Computing Library},
	Year = {2017},
	Bdsk-File-1 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhZYWxpYXNEYXRhXxBQLi4vLi4vLi4vLi4vLi4vLi4vRG9jdW1lbnRzL1B1YmxpY2F0aW9ucy9wZGYvQmliRGVzay9TY2lQeV9LaG9zaGxlc3Nhbl8yMDE3YS5wZGZPEQHQAAAAAAHQAAIAAAREYXRhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADTJAwMSCsAAAAWMkAbU2NpUHlfS2hvc2hsZXNzYW5fMjAxN2EucGRmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHilBtdihPcAAAAAAAAAAAAGAAUAAAkAAAAAAAAAAAAAAAAAAAAAB0JpYkRlc2sAABAACAAA0yRufAAAABEACAAA12LnZwAAAAEAFAAWMkAAFjI+ABYvWAAVPgwAABnhAAIAT0RhdGE6b2xpdmVyOgBEb2N1bWVudHM6AFB1YmxpY2F0aW9uczoAcGRmOgBCaWJEZXNrOgBTY2lQeV9LaG9zaGxlc3Nhbl8yMDE3YS5wZGYAAA4AOAAbAFMAYwBpAFAAeQBfAEsAaABvAHMAaABsAGUAcwBzAGEAbgBfADIAMAAxADcAYQAuAHAAZABmAA8ACgAEAEQAYQB0AGEAEgBGL29saXZlci9Eb2N1bWVudHMvUHVibGljYXRpb25zL3BkZi9CaWJEZXNrL1NjaVB5X0tob3NobGVzc2FuXzIwMTdhLnBkZgATAA0vVm9sdW1lcy9EYXRhAP//AAAACAANABoAJAB3AAAAAAAAAgEAAAAAAAAABQAAAAAAAAAAAAAAAAAAAks=},
	Bdsk-Url-1 = {http://conference.scipy.org/proceedings/scipy2017/mahzad_khoslessan.html}}

@inproceedings{Paraskevakos:2018aa,
	Abstract = {Different frameworks for implementing parallel data analytics applications have been proposed by the HPC and Big Data communities. In this paper, we investigate three frame- works: Spark, Dask and RADICAL-Pilot with respect to their ability to support data analytics requirements on HPC resources. We investigate the data analysis requirements of Molecular Dy- namics (MD) simulations which are significant consumers of su- percomputing cycles, producing immense amounts of data: a typ- ical large-scale MD simulation of physical systems of O(100,000) atoms can produce from O(10) GB to O(1000) GBs of data. We propose and evaluate different approaches for parallelization of a representative set of MD trajectory analysis algorithms, in partic- ular the computation of path similarity and the identification of connected atom. We evaluate Spark, Dask and RADICAL-Pilot with respect to the provided abstractions and runtime engine ca- pabilities to support these algorithms. We provide a conceptual basis for comparing and understanding the different frameworks that enable users to select the optimal system for its application. Further, we provide a quantitative performance analysis of the different algorithms across the three frameworks using different high-performance computing resources.},
	Address = {New York, NY, USA},
	Author = {Ioannis Paraskevakos and Andre Luckow and Mahzad Khoshlessan and Goerge Chantzialexiou and Thomas E. Cheatham and Oliver Beckstein and Geoffrey Fox and Shantenu Jha},
	Booktitle = {ICPP 2018: 47th International Conference on Parallel Processing, August 13--16, 2018, Eugene, OR, USA},
	Date-Added = {2019-05-20 13:28:45 -0700},
	Date-Modified = {2019-05-20 13:28:45 -0700},
	Doi = {10.1145/3225058.3225128},
	Keywords = {Data analytics, MD Simulations Analysis, Parallel , MDAnalysis, task-parallel, PSA, LeafletFinder},
	Month = {August 13--16},
	Organization = {Association for Computing Machinery},
	Pages = {Article No. 49},
	Publisher = {ACM},
	Title = {Task-parallel Analysis of Molecular Dynamics Trajectories},
	Year = {2018},
	Bdsk-File-1 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhZYWxpYXNEYXRhXxBQLi4vLi4vLi4vLi4vLi4vLi4vRG9jdW1lbnRzL1B1YmxpY2F0aW9ucy9wZGYvQmliRGVzay9JQ1BQX1BhcmFza2V2YWtvc18yMDE4YS5wZGZPEQHQAAAAAAHQAAIAAAREYXRhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADTJAwMSCsAAAAWMkAbSUNQUF9QYXJhc2tldmFrb3NfMjAxOGEucGRmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHVAkNbs4U4AAAAAAAAAAAAGAAUAAAkAAAAAAAAAAAAAAAAAAAAAB0JpYkRlc2sAABAACAAA0yRufAAAABEACAAA1u1DvgAAAAEAFAAWMkAAFjI+ABYvWAAVPgwAABnhAAIAT0RhdGE6b2xpdmVyOgBEb2N1bWVudHM6AFB1YmxpY2F0aW9uczoAcGRmOgBCaWJEZXNrOgBJQ1BQX1BhcmFza2V2YWtvc18yMDE4YS5wZGYAAA4AOAAbAEkAQwBQAFAAXwBQAGEAcgBhAHMAawBlAHYAYQBrAG8AcwBfADIAMAAxADgAYQAuAHAAZABmAA8ACgAEAEQAYQB0AGEAEgBGL29saXZlci9Eb2N1bWVudHMvUHVibGljYXRpb25zL3BkZi9CaWJEZXNrL0lDUFBfUGFyYXNrZXZha29zXzIwMThhLnBkZgATAA0vVm9sdW1lcy9EYXRhAP//AAAACAANABoAJAB3AAAAAAAAAgEAAAAAAAAABQAAAAAAAAAAAAAAAAAAAks=}}

@article{Fox:2019aa,
	Archiveprefix = {arXiv},
	Author = {Geoffrey C. Fox and James A. Glazier and J. C. S. Kadupitiya and Vikram Jadhao and Minje Kim and Judy Qiu and James P. Sluka and Endre T. Somogyi and Madhav Marathe and Abhijin Adiga and Jiangzhuo Chen and Oliver Beckstein and Shantenu Jha},
	Bibsource = {dblp computer science bibliography, https://dblp.org},
	Biburl = {https://dblp.org/rec/bib/journals/corr/abs-1902-10810},
	Date-Added = {2019-05-20 13:28:45 -0700},
	Date-Modified = {2019-05-20 13:28:45 -0700},
	Eprint = {1902.10810},
	Journal = {CoRR},
	Timestamp = {Mon, 04 Mar 2019 15:54:37 +0100},
	Title = {Learning Everywhere: Pervasive Machine Learning for Effective High-Performance Computation},
	Url = {http://arxiv.org/abs/1902.10810},
	Volume = {abs/1902.10810},
	Year = {2019},
	Bdsk-File-1 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhZYWxpYXNEYXRhXxBWLi4vLi4vLi4vLi4vLi4vLi4vRG9jdW1lbnRzL1B1YmxpY2F0aW9ucy9wZGYvQmliRGVzay9Db1JSX2Ficy0xOTAyLjEwODEwX0ZveF8yMDE5YS5wZGZPEQHmAAAAAAHmAAIAAAREYXRhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADTJAwMSCsAAAAWMkAfQ29SUl9hYnMtMTkwMi4xMDgxMF8jODZCOTlDLnBkZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIa5nNjxSDQAAAAAAAAAAAAGAAUAAAkAAAAAAAAAAAAAAAAAAAAAB0JpYkRlc2sAABAACAAA0yRufAAAABEACAAA2PGqpAAAAAEAFAAWMkAAFjI+ABYvWAAVPgwAABnhAAIAU0RhdGE6b2xpdmVyOgBEb2N1bWVudHM6AFB1YmxpY2F0aW9uczoAcGRmOgBCaWJEZXNrOgBDb1JSX2Ficy0xOTAyLjEwODEwXyM4NkI5OUMucGRmAAAOAEQAIQBDAG8AUgBSAF8AYQBiAHMALQAxADkAMAAyAC4AMQAwADgAMQAwAF8ARgBvAHgAXwAyADAAMQA5AGEALgBwAGQAZgAPAAoABABEAGEAdABhABIATC9vbGl2ZXIvRG9jdW1lbnRzL1B1YmxpY2F0aW9ucy9wZGYvQmliRGVzay9Db1JSX2Ficy0xOTAyLjEwODEwX0ZveF8yMDE5YS5wZGYAEwANL1ZvbHVtZXMvRGF0YQD//wAAAAgADQAaACQAfQAAAAAAAAIBAAAAAAAAAAUAAAAAAAAAAAAAAAAAAAJn},
	Bdsk-Url-1 = {http://arxiv.org/abs/1902.10810}}
