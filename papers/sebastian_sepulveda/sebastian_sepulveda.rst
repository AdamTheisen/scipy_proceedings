:author: Sebastián Sepúlveda
:email: ssepulveda.sm@gmail.com
:institution: Escuela de Ingeniería Civil Biomédica, Facultad de Ingeniería, Universidad de Valparaíso

:author: Pablo Reyes
:email: pablo.reyes@uv.cl
:institution: Escuela de Ingeniería Civil Biomédica, Facultad de Ingeniería, Universidad de Valparaíso 

:author: Alejandro Weinstein
:email: alejandro.weinstein@uv.cl
:institution: Escuela de Ingeniería Civil Biomédica, Facultad de Ingeniería, Universidad de Valparaíso

:video: http://bit.ly/1BHObxL
:video: http://bit.ly/1Ex0Ydy

------------------------------------------------
Visualizing physiological signals in real time
------------------------------------------------

.. class:: abstract

This work presents a software, written in Python, to visualize and record in real time physiological signals, such as electrocardiography,  electromyography and human movement. The software is also capable of doing real time processing, such as filtering and spectral estimation. The software is open source, extensible, multi-platform and has been tested on different Linux distributions, including conventional PC, Mac and the RaspberryPi (ARM architecture). It leverages the use of several libraries, including PyQtGraph and the SciPy/NumPy stack.

.. class:: keywords

   real time processing, visualization, signal processing

Introduction
------------


A common task in biomedical research is to record and visualize in real time physiological signals. Although there are several options to do this, they are commonly based on  proprietary tools, associated to a particular signal acquisition device vendor. This work presents an open source software, written in Python, to visualize and record in real time physiological signals, such as electrocardiography, electromyography and human movement. The software is also capable of doing real time processing, such as filtering and spectral estimation. The software is open source [#]_  and extensible. It is easy to add new signal processing tasks and to use different signal sources (serial, Bluetooth, Sockets, etc.), and customize the user interface for the applications needs.

.. [#] Available at https://github.com/ssepulveda/RTGraph.

The main objective of the software is to display in real time multiple signals and to export them to a file. In the current implementation, The communication between the software and the acquisition device is through the serial port, and it is implemented using the PySerial library. Other communication protocols can be easily added. The real time display of the signals  is implemented using the PyQtGraph library. [#]_ The software has a multi-process architecture, based on the multiprocessing Python standard library. This allows having concurrent processes for receiving, processing, and displaying the data. Signal processing tasks, such as spectral estimation, are based on the SciPy stack. This architecture assures that no data is loosed and a fast response of the user interface. 

.. [#] Available at http://www.pyqtgraph.org.

The software is multi-platform and runs in any machine and OS where Python and the corresponding dependencies can be installed. The software has been tested on different Linux distributions, including conventional PC, Mac and the RaspberryPi (ARM architecture).


Software architecture
---------------------

The applications described in this work can be classified as a "data logger". A data logger needs to acquire a stream of data, add a time stamp to the data (if required), and export the time-stamped data to a file in a known file format, such as comma separated value (CSV) format. Optionally, the application can do some processing (filtering, spectral estimation, etc.) before saving the data. In addition, it is also useful to be able to visualize, in real time, the stream of data. 

When developing, evaluating, or validating a new hardware or software, it is important to have  control of the outcome of the algorithms and the fidelity and performance of the data acquisition process. In particular, in the field of Biomedical Engineering, the acquisition and signal processing of biological signals needs to be reliable and with a tight control over the sampling frequency. It is also fundamental to ensure that no data is lost during the acquisition and logging process. From a practical point of view, having to wait for the data to be stored before visualizing it (possibly in another program) is cumbersome and tedious, slowing down the development process. For these reasons, in this work we present a program able of: receiving data from a variety of sources (serial port, Bluetooh, Zigbee, Sockets, etc.); processing and visualizing the data in real time; and recording the data in a file.

The first version of this program was developed for a research on Biomechanical engineering. This research involves logging, processing, and real time displaying of the signals generated by a nine degrees of freedom inertial measurement unit (9DOF-IMU). This requires acquiring nine signals with a sampling rate of at least  100 Hz. Six additional signals are computed through a sensor fusion algorithm. A total of 15 signals are displayed and exported as a CSV file. We designed the architecture of the program with these requirements in mind.


Real time graphics library
==========================

Real time visualization is a key component of our program. To satisfy our requirements we needed a fast and portable graphics library. Since we implemented the GUI in PyQT, we also required that the graphics library should be embeddable in this framework.

We used Matplotlib [B]_ in the first version of the program. This option worked out of the box. We were able to embed a Matplotlib plot in the GUI and interact with it trough other elements of the UI without major complications. Although this aproach worked for displaying one signal with a sampling rate of 30 hertz, we started to notice a degradation on performance as we increased the number of signals. It is important to notice that this is not a flaw of Matplotlib, since the main focus of the library is the production of publication of quality figures, and not the display of real time data.

Next, we tried was PyQtGraph [?]_. It is a pure Python implementation, with a focus on speed, portability and a rich set of features. Unlike the previous libraries that we tried, PyQtGraph was designed to do real time plotting. It is also designed to do interactive image analysis. It is built on top of PyQt4/PySide, giving easy integration and full compatibility with the Qt framework. This allows the use of tools like Qt Designer to design the GUI. Using Qt Designer and the examples provides with the PyQtGraph library, it is easy to configure and customize the widgets. PyQtGraph is also built on top of Numpy, facilitating and improving the performance of the manipulation of numerical data. In addition, PyQtGraph wraps up some NumPy/SciPy signal processing functions such as the Fast Fourier Transform and some linear and non-linear filters. [#]_

.. [#] We also evaluated the PyQwt library (http://qwt.sourceforge.net/). This library provides a Python interface to the Qwt library. It is a light implementation with an easy QT integration. It is fast enough to support real time display of the data. However, this library is not currently maintained, and its author recommend using PyQtGraph (see http://comments.gmane.org/gmane.comp.graphics.qwt.python/506). 


Threading versus Multiprocessing
================================

After using PyQtGraph to its limits in a multithreaded architecture, we could not reliably achieve the desired performance. The limitations of threads in Python [E]_ convined with the interaction between the UI (main) and communication thread, resulted in data losses when the data rate was too large. The Global Interpreter Lock (GIL) [E]_ prevents threads to take advantage of multicore systems. In short, it means that a mutex controls the access from threads to the memory. There are ways to work around this limitation. For instance, many of the NumyPy primitives take advantage of multiple cores. [#]_ However, in our case we need to parallelize the reception of the data, the visualization, the processing, and the logging.

.. [#] See http://wiki.scipy.org/ParallelProgramming for details. 

To overcome the GIL limitations we used the multiprocessing module, belonging to the Python Standar Library. This module provides an API similar to the threading module, but it uses subprocesses instead of threads [D]_. By letting the OS to control of the subprocesses, this allows to take advantage of all the cores available on the platform.

Putting all together
====================

Once the key components of the program has been selected, the remaining problem is to orchestrate the communication among the processes. We pay special attention to data synchronization, since there are specific considerations that should be taken into account when working with multiple processes.

Figure :ref:`figSWarch` shows the architecture of the software. The architecture allow us to: (1) Have a multiplatform program. (2) Have a separation between the reception and parsing of input data stream and the plotting and logging tasks. The following is a description of each process.

1. Communication process: This process is responsible of receiving and parsing the data stream send by the device. The implementation considers an abstract class, that subclasses the ``Process`` class from the ``multiprocessing`` library. Therefore, the methods  ``__init__``, ``run``, ``start`` and ``stop`` are overwritten. The class also have methods common to different communication protocols (serial, sockets, etc.). The details of each protocol is implemented in each subclass. This process is also responsible of validating the data and adding the timestamp to the data, in case the device does not have it. This guarantee that the data is always timestamped.

2. Main process: The main process is responsible of initialize the different subprocesses and of coordinate the communication between them. As shown in the figure :ref:`figSWarch`, this process instantiates the components that will allow communication between the subprocesses, and also manage the different UI elements.

 2.1 Timer: using QtTimers, the timer is set to update plot. This allows the graph to be updated  at controlled frequency. This allows to control the performance of general application based on the usage of the different processes and subprocesses.

 2.2. Queue: A queue will be created in consideration of the sampling frequency and the update time of the plot. Each time the plot will be updated (30 times per second), triggered by the QtTimer, the queue will be processed, getting the data from the queue as an array of data, where the first value of the array will be the internal time stamp. The queue will be processed until is empty, and then the proper plotting drawing will occur. The data will be stored in a temporal buffer, until new data arrives to the process.

.. figure:: sw_architecture.pdf

   Diagram of the software architecture. There are two independent processes. The communication process reads the incoming data stream, parse it, add a time stamp (if necessary), and put the processed data into a queue. The main process reads the data from the queue, process the data, and then update the plot and log the data into a file. :label:`figSWarch` 


Programming details
-------------------
The importance on the structure of the acquisition process is to meet the class structure. In this ways, different acquisition methods, such as serial, wireless or sockets, can be used with minimal modification, inclusive; could be selected while the application is running. Also, being a process by them self, it's possible to run different instances of the same acquisition method.

.. code-block:: python

	class AcquisitionProcess(Process):
	    def __init__(self, queue):
	        Process.__init__(self)
            self.exit = Event()
            self.queue = queue
            """
            Initialize the process
            Initialize the acquisition method.
            """

        def run(self):
            self.init_time = time()
            try:
                while not self.exit.is_set():
                    """
                    do acquisition and add time stamp
                    """
            except:
                raise
            finally:
                self.closePort()

        def openPort(self, port):
            """
            Port configuration to open
            """

        def closePort():
            self.exit.set()


Results
-------
The developed software has been tested under different conditions, operative systems and platforms. In development environments, the software has reaches up to 2KHz of sampling rate for a 32 bit data transmitted trough serial as it's ASCII represented integer. The sampling rate using ASCII transfers is limited to the amount of data to been transmitted, principally. In production environments, the software was used to transform a 1024 byte packed every 500 ms trough a socket connection, where up to 20 signal data where included, and plotted without problems at the same speed.

Another important result for the software is how easy is to customize it to a specific application. We provide some use cases where some examples of usage and application are listed.

Use cases
=========
It is easy to modify by other users. Mention Lobos' application (is that the case?).

Figure xx shows a screenshot of the program showing an EMG signal.

Figure yy shows a photo of the device connected through the serial port.

See the following links for two examples where the software is used to acquire EMG signals from different devices: http://bit.ly/1BHObxL, http://bit.ly/1Ex0Ydy.


Conclusions
-----------
We are awesome.

Future work
===========
This software could lead to good solution for rapid prototyping and for growing community based on the open source and DIY.

A friendly UI, with customization of the plots trough UI instead of the code is a must to make a replacement for applications such as LabView or MATLAB solutions.
Adding more tools for basic processing, like filters configurable on the UI, with application "on the fly" would lead to easier understanding both for investigation and education. Learning the applications of the signal processing with real signals and seeing the results in real time applied to a real signal could help in the learning of the signal processing and give more interest to the new learners.
Optimizations to the processes are also in the scope. Including a separate process to do only the processing of the data, is a must to work with even more data and heavier data processing applications. An optimization of the Numpy stack, would increase the performance, stability and compatibility of the application.

Acknowledgments
---------------

This research was partially supported by the Advanced Center for Electrical and
Electronic Engineering, Basal Project FB0008, Conicyt.

References
----------
.. [A] L. Campagnola. *PyQtGraph. Scientific Graphics and GUI Library for Python*,         

.. [B] J. D. Hunter. *Matplotlib: A 2D graphics environment*,
			Computing In Science \& Engineering, 9(3):90-95, IEEE COMPUTER SOC, 2007.

.. [D] https://docs.python.org/2/library/multiprocessing.html

.. [E] Beazley, David. *Understanding the python gil*, In PyCON Python Conference. Atlanta, Georgia. 2010. 


