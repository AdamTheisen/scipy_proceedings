High-performance operator evaluations with ease of use: libCEED's Python interface
==================================================================================

   Valeria Barra, Jed Brown, Jeremy Thompson, Yohann Dudouit

Abstract
----------------------------------------------------------------------------------
libCEED is a new open-source, lightweight library designed to leverage the next generation exascale machines by allowing a wide variety of applications to share highly optimized kernels. libCEED offers implementations, selectable at runtime, tuned for a variety of computational device types, including CPUs and GPUs. libCEED’s purely algebraic framework can unobtrusively be integrated in new and legacy software to provide performance portable applications. In this work, we present libCEED's newly available Python interface that opens up new strategies for parallelism and scaling in high-performance Python, without having to compromise ease of use.

Introduction
----------------------------------------------------------------------------------
libCEED is a new open-source, lightweight library designed to leverage the next generation exascale machines by allowing a wide variety of applications to share highly optimized kernels. Nowadays, high-order numerical methods are widely used in Partial Differential Equation (PDE) solvers, but software packages that provide high-performance implementations have often been special-purpose and intrusive. In contrast, libCEED is light-weight, minimally intrusive, and very versatile. When high-order finite/spectral element discretizations are used, the resulting sparse matrix representation of a global operator is computationally expensive, with respect to both the memory transfer and floating point operations needed for its evaluation. libCEED's Application Programming Interface (API) provides the local action of an operator (linear or nonlinear) without assembling its sparse representation. The purely algebraic nature of libCEED allows efficient operator evaluations (selectable at runtime) and offers matrix-free preconditioning ingredients. While libCEED’s focus is on high-order finite elements, the approach with which it is designed is algebraic and thus applicable to other discretizations in factored form.

In this work, we first introduce libCEED’s conceptual framework and C interface, and then illustrate its new Python interface, developed using the C Foreign Function Interface (CFFI) for Python. CFFI allows to reuse most of the C declarations and requires only a minimal adaptation of some of them. The C and Python APIs are mapped in a nearly 1:1 correspondence. For instance, data stored in the CeedVector structure are associated to arrays defined via the numpy package. In fact, since libCEED heavily relies on pointers and arrays to handle the data, a Python structure that resembles the C arrays is needed. In details, numpy arrays allow this correspondence obtained by passing the numpy array memory address as pointers to the libCEED C API.

In libCEED's API, the pointwise function describing the physics of the problem at the quadrature points is called the QFunction. The mathematical formulation of QFunctions, described in weak form, is fully separated from the parallelization and meshing concerns. In fact, QFunctions, which can either be defined by the user or selected from a gallery of available built-in functions in the library, are pointwise functions that do not depend on element resolution, topology, or basis degree (selectable at run time). This easily allows $hp$-refinement studies (where $h$ commonly denotes the average element size and $p$ the polynomial degree of the basis functions in 1D) and $p$-multigrid solvers. libCEED also supports composition of different operators for multiphysics problems and mixed-element meshes. Currently, user-defined QFunctions are written in C and must be precompiled before running the Python script. The ultimate goal is for users to write only Python code. This will be achieved in the near future by using the Numba high-performance Python compiler.
