:author: Brian McFee
:email: brian.mcfee@nyu.edu
:institution: Center for Data Science, New York University
:institution: Music and Audio Research Laboratory, New York University

:author: Colin Raffel
:email: craffel@gmail.com
:institution: LabROSA, Columbia University

:author: Dawen Liang
:email: dliang@ee.columbia.edu
:institution: LabROSA, Columbia University

:author: Daniel P.W. Ellis
:email: dpwe@ee.columbia.edu
:institution: LabROSA, Columbia University

:author: Matt McVicar
:email: mm4819@bristol.ac.uk
:institution: Department of Engineering Mathematics, University of Bristol

:author: Eric Battenberg
:email: eric@ericbattenberg.com
:institution: Baidu, Inc.

:author: Oriol Nieto
:email: oriol@nyu.edu
:institution: Music and Audio Research Laboratory, New York University

--------------------------------------------------
LibROSA: Audio and Music Signal Analysis in Python
--------------------------------------------------

.. class:: abstract

   This paper describes the design and implementation of librosa version 0.4.0, 
   and provides an overview and historical background of the project.


.. class:: keywords

   audio, music, signal processing


Introduction
------------




Design goals
============


- Low barrier to entry for MATLAB users
    - no objects or class hierarchies
    - make code readable, documented, and tested
- Follow SciPy idioms
- Don't reinvent wheels
- Provide consistent interfaces, standardized parameter settings
- Be modular and pluggable


Conventions
===========

In general, librosa's functions tend to expose all relevant parameters to the caller.
While this provides a great deal of flexibility to expert users, it can be overwhelming
to novice users who simply need a consistent interface to process audio files.  
To satisfy both needs, we define a set of general conventions and standardized default 
parameter values shared across many functions.

An audio signal is represented as a one-dimensional ``numpy`` array, denoted as ``y`` 
throughout librosa.  Typically the signal ``y`` is accompanied by the `sampling rate` 
(denoted ``sr``) which denotes the frequency (in Hz) at which values of ``y`` are
sampled.  The duration of a signal can then be computed by dividing the number of samples
by the sampling rate: 

.. code-block:: python

    >>> track_duration = float(len(y)) / sr

By default, when loading stereo audio files, the ``librosa.load()`` function 
downmixes to mono by averaging left- and right-channels, and then resamples the
monophonic signal to the default rate ``sr=22050`` Hz.

Most audio analysis methods operate not at the native sampling rate of the signal, 
but over small `frames` of the signal which are spaced by a `hop length` (in samples).
Librosa uses default frame and hop lengths of 2048 and 512 samples, respectively.
At the default sampling rate, this corresponds to overlapping frames of approximately 93ms 
spaced by 23ms.
Frames are centered by default, so frame ``t`` corresponds to the time interval::

    [t - frame_length / 2, t + frame_length /2),

where the boundary conditions are handled by reflection-padding the input.
For analyses that do not use fixed-width frames (such as the constant-Q transform), the
default hop length of 512 is retained to facilitate alignment of results.





Package organization
--------------------

In this section, we give a brief overview of the structure of the librosa software
package.


Core
====

The ``librosa.core`` submodule implements a variety of commonly used functions.  Broadly,
``core`` functionality falls into four categories: audio and time-series operations,
spectrogram calculation, time and frequency conversion, and pitch operations.  For
convenience, all functions within the ``core`` submodule are aliased at the top level of
the package hierarchy, e.g., ``librosa.core.load`` is aliased to ``librosa.load``.



Display
=======

Spectral features
=================

Decompositions
==============

Onsets, tempo, and beats
========================

Structural analysis
===================

Effects
=======



Advanced functionality
----------------------

Caching
=======

scikit-learn integration
========================

Filter bank construction
========================

Utilities
=========


.. figure:: tour.pdf
    :scale: 60%
    :figclass: wht

    Top: a waveform plot for a 20-second audio clip ``y``, generated by ``librosa.display.waveplot``.
    Middle: the log-power short-time Fourier transform (STFT) spectrum for ``y`` plotted on a logarithmic
    frequency scale, generated by ``librosa.display.specshow``.
    Bottom: the onset strength function (``librosa.onset.onset_strength``), detected onset events
    (``librosa.onset.onset_detect``), and detected beat events (``librosa.beat.beat_track``) for ``y``.
    :label:`fig:tour`

As you can see in Figure :ref:`fig:tour`, this is how you reference auto-numbered
figures.


References
----------
.. [Atr03] P. Atreides. *How to catch a sandworm*,
           Transactions on Terraforming, 21(3):261-300, August 2003.


